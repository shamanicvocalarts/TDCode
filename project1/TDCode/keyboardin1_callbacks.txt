# me - This DAT
# 
# dat - The DAT that received the key event
# keyInfo - A namedtuple containing the following members:
#	key - The name of the key attached to the event.
#			This tries to be consistent regardless of which language
#			the keyboard is set to. The values will be the english/ASCII
#			values that most closely match the key pressed.
#			This is what should be used for shortcuts instead of 'character'.
#	webCode - The name of the key following web-programming standards.
#	character - The unicode character generated.
#	alt - True if the alt modifier is pressed
#	lAlt - True if the left-alt modifier is pressed
#	rAlt - True if the right-alt modifier is pressed
#	ctrl - True if the ctrl modifier is pressed
#	lCtrl - True if the left-ctrl modifier is pressed
#	rCtrl - True if the right-ctrl modifier is pressed
#	shift - True if the shift modifier is pressed
#	lShift - True if the left-shift modifier is pressed
#	rShift - True if the right-shift modifier is pressed
#	state - True if the event is a key press event
#	time - The time when the event came in milliseconds
#	cmd - True if the cmd modifier is pressed
#	lCmd - True if the left-cmd modifier is pressed
#	rCmd - True if the right-cmd modifier is pressed

def onKey(dat, key, character, alt, lAlt, rAlt, ctrl, lCtrl, rCtrl, shift, lShift, rShift, state, time):
    if key == 't' and ctrl and state:
        op.TDC.par.Showeditor = not op.TDC.par.Showeditor
        
'''         # If we just showed the editor, move the cursor
        if op.TDC.par.Showeditor:
            centerMouseOnTDCodePane()

def centerMouseOnTDCodePane():
    pane = ui.panes['TDCode']
    if pane:
        # Get the pane's position and size
        left, bottom, left_u, bottom_v = pane.bottomLeft
        right, top, right_u, top_v = pane.topRight
        
        # Calculate the center of the pane in UV coordinates
        center_u = (left_u + right_u) / 2
        center_v = (bottom_v + top_v) / 2
        
        print(f"Pane UV center: u={center_u}, v={center_v}")

        # Set the Constant CHOP values
        constant = op('constant_mouse_position')
        if constant:
            constant.par.value0 = center_u
            constant.par.value1 = center_v
            print(f"Mouse position set to: {center_u}, {center_v}")
        else:
            print("Error: 'constant_mouse_position' CHOP not found") '''

# shortcutName is the name of the shortcut

def onShortcut(dat, shortcutName, time):
	return;
	