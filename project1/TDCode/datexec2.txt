def onTableChange(dat):
    string_menus_to_populate = ['Opsmenu']
    if dat and dat.numRows > 1:
        opPaths = [dat[row, 'path'].val for row in range(1, dat.numRows)]
        opRelPaths = [dat[row, 'path'].val for row in range(1, dat.numRows)]
        for menu in string_menus_to_populate:
            parent_param = parent().par[menu]
            if parent_param:
                parent_param.menuNames = opPaths
                parent_param.menuLabels = opRelPaths  # Use paths for labels as well
        
        # We don't need to add blank lines for OPs, so we'll skip that part
    else:
        for menu in string_menus_to_populate:
            parent_param = parent().par[menu]
            if parent_param:
                parent_param.menuNames = []
                parent_param.menuLabels = []

    op('webserver1_callbacks').module.UpdateOpsListInEditor()
    return

def GetOpsList():
    opPaths = parent().par.Opsmenu.menuNames
    opRelPaths = parent().par.Opsmenu.menuLabels
    return [{'path': opPaths[i], 'name': opRelPaths[i]} for i in range(len(opPaths))]

def ConstructFileTree():
    ops_list = GetOpsList()
    
    file_tree = []
    
    for op in ops_list:
        path_parts = op['path'].split('/')
        current_level = file_tree
        for i, part in enumerate(path_parts):
            found = False
            for item in current_level:
                if item['name'] == part:
                    current_level = item['children']
                    found = True
                    break
            if not found:
                new_item = {
                    'name': part, 
                    'path': '/'.join(path_parts[:i+1]),
                    'isDirectory': True,  # All OPs can be directories
                    'isOp': True,  # All items are OPs
                    'children': []
                }
                current_level.append(new_item)
                current_level = new_item['children']
    return file_tree