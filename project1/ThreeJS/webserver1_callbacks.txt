# me - this DAT.
# webServerDAT - the connected Web Server DAT
# request - A dictionary of the request fields. The dictionary will always contain the below entries, plus any additional entries dependent on the contents of the request
# 		'method' - The HTTP method of the request (ie. 'GET', 'PUT').
# 		'uri' - The client's requested URI path. If there are parameters in the URI then they will be located under the 'pars' key in the request dictionary.
#		'pars' - The query parameters.
# 		'clientAddress' - The client's address.
# 		'serverAddress' - The server's address.
# 		'data' - The data of the HTTP request.
# response - A dictionary defining the response, to be filled in during the request method. Additional fields not specified below can be added (eg. response['content-type'] = 'application/json').
# 		'statusCode' - A valid HTTP status code integer (ie. 200, 401, 404). Default is 404.
# 		'statusReason' - The reason for the above status code being returned (ie. 'Not Found.').
# 		'data' - The data to send back to the client. If displaying a web-page, any HTML would be put here.

ModelOperations = op('ModelOperations')

# return the response dictionary
def onHTTPRequest(webServerDAT, request, response):
    uri = request['uri']
    method = request['method']  # Correctly access the method
    
    # Access the WebServerRoutes table
    routes_table = op('webserver_routes')
    
    # Check for file save request
    if uri == '/save-model' and method == 'POST':
        return mod.ModelOperations.save_model(request, response)
    elif uri == '/stream-geometry' and method == 'POST':
        return mod.ModelOperations.handle_streamed_geometry(request, response)
    
    # Iterate over the rows to find the matching route
    for row in routes_table.rows()[1:]:  # Skip header row
        route_uri, operator_name, content_type = row
        
        if route_uri == uri:
            response['statusCode'] = 200
            response['statusReason'] = 'OK'
            response['data'] = op(operator_name).text
            response['content-type'] = content_type or 'text/html'
            return response
    
    # If no match is found, return 404
    response['statusCode'] = 404
    response['statusReason'] = 'Not Found'
    response['data'] = '404 - Not Found'
    return response

# Other WebServer callbacks remain unchanged

def onWebSocketOpen(webServerDAT, client, uri):
	return

def onWebSocketClose(webServerDAT, client):
	return

def onWebSocketReceiveText(webServerDAT, client, data):
	webServerDAT.webSocketSendText(client, data)
	return

def onWebSocketReceiveBinary(webServerDAT, client, data):
	webServerDAT.webSocketSendBinary(client, data)
	return

def onWebSocketReceivePing(webServerDAT, client, data):
	webServerDAT.webSocketSendPong(client, data=data);
	return

def onWebSocketReceivePong(webServerDAT, client, data):
	return

def onServerStart(webServerDAT):
	return





def onServerStop(webServerDAT):
	return
	